# main.py
# Orchestrates the Energy Consumption Forecasting pipeline.

import data_cleaning
import eda
import baseline_models
# import gru_model # GRU model removed as per request
import xgboost_hackathon # Note: XGBoost LOOCV can also be time-consuming
import os

# Define the names of the input Excel file (used conceptually for naming conventions)
# and the output cleaned Excel file
# The actual data_cleaning.py now reads from specific CSVs
INPUT_XLSX_CONCEPT_NAME  = 'Buildings_el.xlsx' # Used for naming output, actual input is CSVs
OUTPUT_XLSX = 'cleaned_buildings_el.xlsx' 

# The data_cleaning.py script directly uses these CSV names:
ELECTRICITY_CSV = 'Buildings_el.xlsx - Electricity kWh.csv'
WEATHER_CSV = 'Buildings_el.xlsx - Weather archive.csv'
AREAS_CSV = 'Buildings_el.xlsx - Areas.csv'


def run_pipeline():
    print("Starting Energy Consumption Forecasting Pipeline...\n")

    # Step 1: Data Cleaning
    print("--- Step 1: Data Cleaning ---")
    # Check if all required input CSV files exist
    required_csvs = [
        data_cleaning.ELECTRICITY_CSV,
        data_cleaning.WEATHER_CSV,
        data_cleaning.AREAS_CSV
    ]
    missing_csvs = [f for f in required_csvs if not os.path.exists(f)]
    
    if missing_csvs:
        print(f"Error: The following input CSV file(s) not found: {', '.join(missing_csvs)}")
        print("Please ensure these files are in the same directory as the scripts.")
        return
        
    try:
        # data_cleaning.py now uses constants for CSV names and OUTPUT_XLSX
        data_cleaning.main() 
        print("Data cleaning completed successfully.\n")
    except Exception as e:
        print(f"Error during data cleaning: {e}\n")
        return # Stop pipeline if cleaning fails

    # Check if cleaned file was created by data_cleaning.py
    if not os.path.exists(data_cleaning.OUTPUT_XLSX): # Use constant from data_cleaning
        print(f"Error: Cleaned file '{data_cleaning.OUTPUT_XLSX}' was not generated by data_cleaning.py.")
        return

    # Step 2: Exploratory Data Analysis
    # eda.py will need to use the new OUTPUT_XLSX name
    print("--- Step 2: Exploratory Data Analysis ---")
    try:
        # We'll need to modify eda.py to use the new cleaned file name.
        # For now, assuming eda.py is adapted or we pass the filename.
        # eda.CLEANED_XLSX = data_cleaning.OUTPUT_XLSX # Conceptually
        eda.main() # Assuming eda.py is adapted to use 'cleaned_buildings_el.xlsx'
        print("EDA completed successfully.\n")
    except Exception as e:
        print(f"Error during EDA: {e}\n")

    # Step 3: Baseline Models
    # baseline_models.py will also need to use the new OUTPUT_XLSX name
    print("--- Step 3: Baseline Models ---")
    try:
        # baseline_models.CLEANED_XLSX = data_cleaning.OUTPUT_XLSX # Conceptually
        baseline_models.main() # Assuming baseline_models.py is adapted
        print("Baseline models evaluation completed successfully.\n")
    except Exception as e:
        print(f"Error during baseline model evaluation: {e}\n")

    # GRU Model step removed
    # print("--- Step 4: Advanced Model - GRU (Example for 'ICT' building) ---")
    # run_gru = input("Run GRU model training (can be slow, requires PyTorch)? (yes/no): ").strip().lower()
    # if run_gru == 'yes':
    #     try:
    #         gru_model.main() 
    #         print("GRU model training (example) completed.\n")
    #     except ImportError:
    #         print("PyTorch not found. Skipping GRU model.\n")
    #     except Exception as e:
    #         print(f"Error during GRU model training: {e}\n")
    # else:
    #     print("Skipping GRU model training.\n")

    # Step 4 (was 5): Advanced Model - XGBoost Hackathon Simulation (LOOCV)
    # xgboost_hackathon.py will also need to use the new OUTPUT_XLSX name
    print("--- Step 4: Advanced Model - XGBoost Hackathon Simulation (LOOCV) ---")
    run_xgb = input("Run XGBoost Hackathon simulation (can be slow, requires XGBoost & Matplotlib)? (yes/no): ").strip().lower()
    if run_xgb == 'yes':
        try:
            # xgboost_hackathon.CLEANED_XLSX = data_cleaning.OUTPUT_XLSX # Conceptually
            xgboost_hackathon.main() # Assuming xgboost_hackathon.py is adapted
            print("XGBoost Hackathon simulation completed.\n")
        except ImportError:
            print("XGBoost or Matplotlib not found. Skipping XGBoost simulation.\n")
        except Exception as e:
            print(f"Error during XGBoost Hackathon simulation: {e}\n")
    else:
        print("Skipping XGBoost Hackathon simulation.\n")
        
    print("--- Energy Consumption Forecasting Pipeline Finished ---")

if __name__ == '__main__':
    run_pipeline()
